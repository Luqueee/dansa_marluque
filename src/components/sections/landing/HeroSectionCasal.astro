---
// Import the necessary dependencies
import { Image } from 'astro:assets';
import PrimaryCTA from '@components/ui/buttons/PrimaryCTA.astro';
import SecondaryCTA from '@components/ui/buttons/SecondaryCTA.astro';
import ReviewComponent from '@components/ui/blocks/ReviewComponent.astro';

const baseClasses =
    'inline-flex items-center justify-center gap-x-2 rounded-lg px-4 py-3 text-sm font-bold text-neutral-700 focus-visible:ring outline-none transition duration-300';
const borderClasses = 'border border-transparent';
const bgColorClasses = 'bg-yellow-400 dark:focus:outline-none';
const bgColorWhats = 'bg-[#25cc64] dark:focus:outline-none text-white';
const hoverWhats = 'hover:bg-[#64e386]';

const hoverClasses = 'hover:bg-yellow-500';
const fontSizeClasses = '2xl:text-base';
const disabledClasses = 'disabled:pointer-events-none disabled:opacity-50';
const ringClasses = 'ring-zinc-500 dark:ring-zinc-200';

// Define props from Astro
const {
    title,
    subTitle,
    primaryBtn,
    primaryBtnURL,
    secondaryBtn,
    secondaryBtnURL,
    withReview,
    avatars,
    starCount,
    rating,
    reviews,
    src,
    alt,
} = Astro.props;

// Define TypeScript interface for props
interface Props {
    title: string;
    subTitle?: string;
    primaryBtn?: string;
    primaryBtnURL?: string;
    secondaryBtn?: string;
    secondaryBtnURL?: string;
    withReview?: boolean;
    avatars?: Array<string>;
    starCount?: number;
    rating?: string;
    reviews?: string;
    src?: any;
    alt?: string;
}
---

<style>
    @media only screen and (min-width: 600px) and (max-width: 991px) {
        .background {
            filter: drop-shadow(0 0 5px rgba(255, 255, 255, 0.2));
            mask-image: linear-gradient(to bottom, black 50%, transparent 95%);
        }
    }

    @media only screen and (min-width: 992px) {
        .background {
            filter: drop-shadow(0 0 10px rgba(255, 255, 255, 0.2));
            mask-image: linear-gradient(to bottom, black 50%, transparent 95%);
        }
    }
</style>

<!-- Defining a grid container that holds all the content -->
<section
    class="mx-auto grid max-w-[85rem] gap-4 px-4 py-14 sm:px-6 md:grid-cols-2 md:items-center md:gap-8 lg:px-8 2xl:max-w-full">
    <!-- Title and description -->
    <div>
        <!-- Each h1 and p tag renders a portion of the title and subTitle defined above -->
        <h1
            class="block text-balance text-3xl font-bold tracking-tight sm:text-4xl lg:text-6xl lg:leading-tight">
            <!-- About Fragment: https://docs.astro.build/en/basics/astro-syntax/#fragments -->
            <Fragment set:html={title} />
        </h1>
        {
            subTitle && (
                <p class="mt-3 text-pretty text-lg leading-relaxed text-neutral-700 dark:text-neutral-400 lg:w-4/5">
                    {subTitle}
                </p>
            )
        }
        <!-- Action Button Section: This section includes two CTAs with their own styles and URL -->
        <div class="mt-7 grid w-full gap-3 sm:inline-flex">
            {
                primaryBtn && (
                    <PrimaryCTA title={primaryBtn} url={primaryBtnURL} />
                )
            }
            {
                secondaryBtn && (
                    <SecondaryCTA title={secondaryBtn} url={secondaryBtnURL} />
                )
            }

            <a
                href="https://wa.me/34654350567"
                target="_blank"
                class={`g-recaptcha ${baseClasses} ${borderClasses} ${bgColorWhats} ${hoverWhats} ${fontSizeClasses} ${disabledClasses} ${ringClasses}`}>
                Whatsapp
            </a>
        </div>

        <!-- Review Section: This section presents avatars, review ratings and the number of reviews -->
        {
            withReview ? (
                <ReviewComponent
                    avatars={avatars}
                    starCount={starCount}
                    rating={rating}
                    reviews={reviews}
                />
            ) : (
                ''
            )
        }
    </div>
    <!-- Hero Image Section -->
    <div class="flex w-full">
        <div class="top-12 overflow-hidden">
            {
                src && alt && (
                    <Image
                        src={src}
                        alt={alt}
                        inferSize={true}
                        class="background sm: scale-55 aspect-[4/3] h-full w-full object-contain "
                        style="filter: drop-shadow(0 0 10px rgba(255, 255, 255, .2)); mask-image: linear-gradient(to bottom, black 50%, transparent 95%);"
                        draggable={'false'}
                        loading={'eager'}
                        format={'webp'}
                    />
                )
            }
        </div>
    </div>
</section>
